// Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include 'src/builtins/builtins-regexp-gen.h'

namespace regexp_replace {

  extern builtin
  StringIndexOf(implicit context: Context)(String, String, Smi): Smi;
  extern builtin
  SubString(implicit context: Context)(String, Smi, Smi): String;

  extern runtime RegExpExecMultiple(implicit context: Context)(
      JSRegExp, String, RegExpMatchInfo, JSArray): Null | JSArray;
  extern transitioning runtime
  RegExpReplaceRT(Context, JSReceiver, String, Object): String;
  extern transitioning runtime
  StringBuilderConcat(implicit context: Context)(JSArray, Smi, String): String;
  extern transitioning runtime
  StringReplaceNonGlobalRegExpWithFunction(implicit context: Context)(
      String, JSRegExp, Callable): String;

  // TODO(pwong): consider supporting special keyword replacement `$`.
  // extern macro StringBuiltinsAssembler::GetSubstitution(
  //   implicit context: Context)(String, Smi, Smi, String): String;

  // Fast
  extern macro
  RegExpBuiltinsAssembler::AdvanceStringIndex(String, Smi, bool): Smi;
  // Slow
  extern macro
  RegExpBuiltinsAssembler::AdvanceStringIndex(String, Number, bool): Number;
  extern macro
  RegExpBuiltinsAssembler::CallJSRegExpRegExpReplaceToSequentialString(
      String, FixedArray, intptr, String, String): String;

  // TODO(pwong): Consider optimizing to pass `collectCaptures: bool` to collect
  // capture start/end indices or not.
  // TODO(pwong): Create a method that takes a FastJSRegExp and one that
  // doesn't.  Both won't need to the isFast: constexpr bool. This will remove
  // the need for IsFastRegExpType.
  extern macro
  RegExpBuiltinsAssembler::RegExpPrototypeExecBodyWithoutResult(
      implicit context: Context)(JSReceiver, String, constexpr bool):
      RegExpMatchInfo labels IfDidNotMatch;

  macro IsFastRegExpType<T: type>(): constexpr bool {
    return false;
  }
  IsFastRegExpType<FastJSRegExp>(): constexpr bool {
    return true;
  }

  macro RegExpPrototypeExecBodyWithoutResult<T: type>(
      implicit context: Context)(regex: T, subject: String):
      RegExpMatchInfo labels IfDidNotMatch {
    return RegExpPrototypeExecBodyWithoutResult(
        regex, subject, IsFastRegExpType<T>())
        otherwise IfDidNotMatch;
  }

  macro SubStringInline(implicit context: Context)(
      string: String, start: Smi, end: Smi): String {
    return start < end ? SubString(string, start, end) : kEmptyString;
  }

  transitioning macro RegExpReplaceCallableNoExplicitCaptures(implicit context:
                                                                  Context)(
      matchesElements: FixedArray, matchesLength: intptr, string: String,
      replaceFn: Callable) {
    let matchStart: Smi = 0;
    for (let i: intptr = 0; i < matchesLength; i++) {
      typeswitch (matchesElements.objects[i]) {
        // Element represents a slice.
        case (elSmi: Smi): {
          // The slice's match start and end is either encoded as one or two
          // smis. A positive smi indicates a single smi encoding (see
          // ReplacementStringBuilder::AddSubjectSlice()).
          if (elSmi > 0) {
            // For single smi encoding, see
            // StringBuilderSubstringLength::encode() and
            // StringBuilderSubstringPosition::encode().
            const elInt: intptr = Convert<intptr>(elSmi);
            const newMatchStart: intptr = (elInt >> 11) + (elInt & 0x7FF);
            matchStart = Convert<Smi>(newMatchStart);
          } else {
            // For two smi encoding, the length is negative followed by the
            // match start.
            const nextEl: Smi = UnsafeCast<Smi>(matchesElements.objects[++i]);
            matchStart = nextEl - elSmi;
          }
        }
        // Element represents the matched substring, which is then passed to the
        // replace function.
        case (elString: String): {
          const replacementObj: Object =
              Call(context, replaceFn, Undefined, elString, matchStart, string);
          const replacement: String = ToString_Inline(context, replacementObj);
          matchesElements.objects[i] = replacement;
          matchStart += elString.length_smi;
        }
        case (Object): deferred {
          unreachable;
        }
      }
    }
  }

  transitioning macro
  RegExpReplaceCallableWithExplicitCaptures(implicit context: Context)(
      matchesElements: FixedArray, matchesLength: intptr, string: String,
      replaceFn: Callable) {
    for (let i: intptr = 0; i < matchesLength; i++) {
      const elArray =
          Cast<JSArray>(matchesElements.objects[i]) otherwise continue;

      // The JSArray is expanded into the function args by Reflect.apply().
      // TODO(jgruber): Remove indirection through Call->ReflectApply.
      const replacementObj: Object = Call(
          context, GetReflectApply(), Undefined, replaceFn, Undefined, elArray);

      // Overwrite the i'th element in the results with the string
      // we got back from the callback function.
      matchesElements.objects[i] = ToString_Inline(context, replacementObj);
    }
  }

  transitioning macro RegExpReplaceFastGlobalCallable(implicit context:
                                                          Context)(
      regexp: FastJSRegExp, string: String, replaceFn: Callable): String {
    regexp.lastIndex = 0;

    const kInitialCapacity: Smi = 16;
    const kInitialLength: Smi = 0;
    const result: Null | JSArray = RegExpExecMultiple(
        regexp, string, GetRegExpLastMatchInfo(),
        AllocateJSArray(
            PACKED_ELEMENTS, GetFastPackedElementsJSArrayMap(),
            kInitialCapacity, kInitialLength));

    regexp.lastIndex = 0;

    // If no matches, return the subject string.
    if (result == Null) return string;

    const matches: JSArray = UnsafeCast<JSArray>(result);
    const matchesLength: Smi = Cast<Smi>(matches.length) otherwise unreachable;
    const matchesLengthInt: intptr = Convert<intptr>(matchesLength);
    const matchesElements: FixedArray =
        UnsafeCast<FixedArray>(matches.elements);

    // Reload last match info since it might have changed.
    const nofCaptures: Smi = GetRegExpLastMatchInfo().NumberOfCaptures();

    // If the number of captures is two then there are no explicit captures in
    // the regexp, just the implicit capture that captures the whole match. In
    // this case we can simplify quite a bit and end up with something faster.
    if (nofCaptures == 2) {
      RegExpReplaceCallableNoExplicitCaptures(
          matchesElements, matchesLengthInt, string, replaceFn);
    } else {
      RegExpReplaceCallableWithExplicitCaptures(
          matchesElements, matchesLengthInt, string, replaceFn);
    }

    return StringBuilderConcat(matches, matchesLength, string);
  }

  type OnMatchFn =
      builtin(Context, Object, String, Object, RegExpMatchInfo, Smi) => Object;
  builtin OnMatchSimpleStringReplace(
      context: Context, acc: Object, subject: String, replace: Object,
      match: RegExpMatchInfo, lastMatchEnd: Smi): Object {
    const matchStart: Smi = match.GetStartOfCapture(0);
    let result: String = UnsafeCast<String>(acc);
    if (lastMatchEnd != matchStart) {
      result += SubString(subject, lastMatchEnd, matchStart);
    }

    const replaceString = UnsafeCast<String>(replace);
    if (replaceString.length_uint32 == 0) return result;
    return result + replaceString;
  }

  // TODO(pwong): Support FixedTypedArrays.
  const kLengthIndex: constexpr int31 = 0;
  const kFirstElementIndex: constexpr int31 = 1;

  // TODO(pwong): Figure out how to use the growable-fixed-array instead of
  // dupe-ing it here.
  // TODO(pwong): Compare with a rope structure.
  struct GrowableFixedArray {
    Push(obj: Tagged) {
      assert(this.length <= this.capacity);
      if (++this.length >= this.capacity) {
        const kStart: constexpr int31 = 0;
        const prevCapacity: intptr = this.capacity;

        // Growth rate is analog to JSObject::NewElementsCapacity:
        // new_capacity = (current_capacity + (current_capacity >> 1)) + 16.
        this.capacity = this.capacity + (this.capacity >> 1) + 16;
        this.array = ExtractFixedArray(
            this.array, kStart, prevCapacity, this.capacity, kFixedArrays);
      }

      this.array.objects[kLengthIndex] = Convert<Smi>(this.length);
      this.array.objects[this.length] = obj;
    }
    array: FixedArray;
    capacity: intptr;
    length: intptr;
  }

  macro NewGrowableFixedArray(implicit context: Context)(array: FixedArray):
      GrowableFixedArray {
    if (array == kEmptyFixedArray) {
      return GrowableFixedArray{array, capacity: 0, length: 0};
    } else {
      return GrowableFixedArray{
        array,
        capacity: array.length_intptr,
        length: Convert<intptr>(UnsafeCast<Smi>(array.objects[kLengthIndex]))
      };
    }
  }

  struct GrowableFixedArrayIterator {
    Next(): Object labels NoMore {
      if (this.i > this.length) goto NoMore;
      return this.array.objects[this.i++];
    }
    NextTagged(): Tagged labels NoMore {
      return this.Next() otherwise NoMore;
    }
    i: intptr;
    const array: FixedArray;
    const length: intptr;
  }
  macro NewGrowableFixedArrayIterator(implicit context: Context)(
      array: FixedArray): GrowableFixedArrayIterator {
    const length: intptr = array == kEmptyFixedArray ?
        0 :
        Convert<intptr>(UnsafeCast<Smi>(array.objects[kLengthIndex]));
    return GrowableFixedArrayIterator{i: kFirstElementIndex, array, length};
  }

  class NoCaptureMatchInfo {
    unmatched: String;
    matched: String;
    matchStart: Smi;
  }

  builtin OnMatchCallableNoCaptures(
      context: Context, acc: Object, subject: String, replace: Object,
      match: RegExpMatchInfo, lastMatchEnd: Smi): Object {
    // TODO(pwong): Add RegExpResultsCache::Lookup() (see SearchRegExpMultiple)
    // TODO(pwong): Add RegExpResultsCache::Enter() (see SearchRegExpMultiple)
    const matchStart: Smi = match.GetStartOfCapture(0);
    const matchEnd: Smi = match.GetEndOfCapture(0);
    const matched: String = SubStringInline(subject, matchStart, matchEnd);
    const unmatched: String =
        SubStringInline(subject, lastMatchEnd, matchStart);
    const info: Tagged = new NoCaptureMatchInfo{unmatched, matched, matchStart};
    let gfa: GrowableFixedArray =
        NewGrowableFixedArray(UnsafeCast<FixedArray>(acc));
    gfa.Push(info);
    return gfa.array;
  }

  builtin OnMatchCallableWithCaptures(
      context: Context, acc: Object, subject: String, replace: Object,
      match: RegExpMatchInfo, lastMatchEnd: Smi): Object {
    const nofCaptured: intptr = Convert<intptr>(match.NumberOfCaptures()) >> 1;

    // Aguments for callable:
    // [0..n] - Captured Strings
    // [n+1]  - Matched Start Index
    // [n+2]  - Last Matched End Index
    const length: intptr = 2 + nofCaptured;
    const callableArgs: FixedArray =
        AllocateFixedArrayWithUndefined(length, kNone);

    // [0..n] - Captured Strings
    let i: intptr = 0;
    while (i < nofCaptured) {
      const captureStart: Smi = match.GetStartOfCapture(i);
      const captureEnd: Smi = match.GetEndOfCapture(i);
      // -1 indicates the capture group did not match anything.
      if (captureStart != -1) {
        callableArgs.objects[i] =
            SubStringInline(subject, captureStart, captureEnd);
      }
      i++;
    }
    // [n+1] - Matched Start Index
    callableArgs.objects[i++] = match.GetStartOfCapture(0);
    // [n+2]  - Unmatched String
    callableArgs.objects[i++] = lastMatchEnd;
    assert(i == length);

    let gfa: GrowableFixedArray =
        NewGrowableFixedArray(UnsafeCast<FixedArray>(acc));
    gfa.Push(callableArgs);
    return gfa.array;
  }

  macro AdvanceLastIndex<T: type>(implicit context:
                                       Context)(rx: T, string: String) {
    rx.lastIndex = AdvanceStringIndex(string, rx.lastIndex, rx.unicode);
  }

  type OnFinalizeFn = builtin(Context, Object, String, Object) => String;
  builtin OnFinalizeSimpleStringReplace(
      context: Context, acc: Object, subject: String,
      replacer: Object): String {
    return UnsafeCast<String>(acc);
  }
  transitioning builtin OnFinalizeCallableNoCaptures(
      context: Context, acc: Object, subject: String,
      replacer: Object): String {
    const replaceFn: Callable = UnsafeCast<Callable>(replacer);
    let iter = NewGrowableFixedArrayIterator(UnsafeCast<FixedArray>(acc));
    let result: String = kEmptyString;
    while (true) {
      const info =
          %RawDownCast<NoCaptureMatchInfo>(iter.NextTagged() otherwise break);

      // Append unmatched string
      const unmatched = info.unmatched;
      if (unmatched != kEmptyString) result += unmatched;

      const replacementObj: Object = Call(
          context, replaceFn, Undefined, info.matched, info.matchStart,
          subject);
      const replacement: String = ToString_Inline(context, replacementObj);
      if (replacement != kEmptyString) result += replacement;
    }
    return result;
  }
  transitioning builtin OnFinalizeCallableWithCaptures(
      context: Context, acc: Object, subject: String,
      replacer: Object): String {
    const replaceFn: Callable = UnsafeCast<Callable>(replacer);
    let iter = NewGrowableFixedArrayIterator(UnsafeCast<FixedArray>(acc));
    let result: String = kEmptyString;
    while (true) {
      const elements = UnsafeCast<FixedArray>(iter.Next() otherwise break);
      const length: intptr = elements.length_intptr;

      // Append unmatched string
      const lastMatchEnd = UnsafeCast<Smi>(elements.objects[length - 1]);
      elements.objects[length - 1] =
          subject;  // Replace the last entry with the subject
      const matchStart = UnsafeCast<Smi>(elements.objects[length - 2]);
      if (lastMatchEnd < matchStart) {
        result += SubString(subject, lastMatchEnd, matchStart);
      }

      const args = new JSArray{
        map: GetFastPackedElementsJSArrayMap(),
        properties_or_hash: kEmptyFixedArray,
        elements,
        length: Convert<Smi>(length)
      };
      const replacement: String = ToString_Inline(
          context,
          Call(
              context, GetReflectApply(), Undefined, replaceFn, Undefined,
              args));
      if (replacement != kEmptyString) result += replacement;
    }
    return result;
  }

  struct ReplaceStrategy {
    const initialAccumulatorValue: Object;
    const onMatchFn: OnMatchFn;
    const onFinalizeFn: OnFinalizeFn;
  }

  macro Process<T: type>(implicit context: Context)(
      rx: T, subject: String, replacer: Object,
      strategy: ReplaceStrategy): String {
    let lastMatchEnd: Smi = 0;
    let acc: Object = strategy.initialAccumulatorValue;
    let hasMatches: bool = false;
    let regexp: T = rx;
    const stableRegexp: JSRegExp = regexp;
    const global: bool = regexp.global;
    // TODO(pwong): Reduce cost of loading global and unicde. Load flags once
    // and bit manipulate.
    if (global) regexp.lastIndex = 0;

    while (true) {
      const match: RegExpMatchInfo =
          RegExpPrototypeExecBodyWithoutResult(regexp, subject) otherwise break;
      hasMatches = true;

      const onMatchFn: OnMatchFn = strategy.onMatchFn;
      acc = onMatchFn(context, acc, subject, replacer, match, lastMatchEnd);
      regexp = %RawDownCast<T>(stableRegexp);

      const matchEnd: Smi = match.GetEndOfCapture(0);
      const matchStart: Smi = match.GetStartOfCapture(0);
      lastMatchEnd = matchEnd;

      // Non-global case ends here after the first replacement.
      if (!global) break;

      // If match is the empty string, we have to increment lastIndex.
      if (matchEnd == matchStart) AdvanceLastIndex(regexp, subject);
    }
    if (!hasMatches) return subject;

    const subjectLength: Smi = subject.length_smi;
    const onFinalizeFn: OnFinalizeFn = strategy.onFinalizeFn;
    const result: String = onFinalizeFn(context, acc, subject, replacer);
    if (lastMatchEnd == subjectLength) return result;
    return result + SubStringInline(subject, lastMatchEnd, subjectLength);
  }

  macro NewReplaceStrategy(implicit context: Context)(regexp: JSRegExp): ReplaceStrategy {
    // The fast path is reached only if {receiver} is an unmodified JSRegExp
    // instance, {replace_value} is non-callable, and ToString({replace_value})
    // does not contain '$', i.e. we're doing a simple string replacement.
    return ReplaceStrategy{
      initialAccumulatorValue: kEmptyString,
      onMatchFn: OnMatchSimpleStringReplace,
      onFinalizeFn: OnFinalizeSimpleStringReplace
    };
  }

  macro NewReplaceStrategyForCallable(implicit context: Context)(
      regexp: JSRegExp): ReplaceStrategy {
    const captureCount: Smi = regexp.CaptureCount();
    if (captureCount == 0) {
      return ReplaceStrategy{
        initialAccumulatorValue: kEmptyFixedArray,
        onMatchFn: OnMatchCallableNoCaptures,
        onFinalizeFn: OnFinalizeCallableNoCaptures
      };
    }
    try {
      // TODO(pwong): Unfortunately CaptureNameMap is NOT available until after
      // Exec is called :(
      const namedCaptures: FixedArray = regexp.CaptureNameMap() otherwise IfNoNamedCaptures;
      return ReplaceStrategy{
        initialAccumulatorValue: kEmptyFixedArray,
        onMatchFn: OnMatchCallableWithCaptures,
        onFinalizeFn: OnFinalizeCallableWithCaptures
      };
    }
    label IfNoNamedCaptures {
      return ReplaceStrategy{
        initialAccumulatorValue: kEmptyFixedArray,
        onMatchFn: OnMatchCallableWithCaptures,
        onFinalizeFn: OnFinalizeCallableWithCaptures
      };
    }
  }

  transitioning builtin RegExpReplace(implicit context: Context)(
      regexp: JSRegExp, string: String, replaceValue: Object): String {
    // TODO(pwong): Remove assert when all callers (StringPrototypeReplace) are
    // from Torque.
    assert(Is<FastJSRegExp>(regexp));

    // 2. Is {replace_value} callable?
    let strategy: ReplaceStrategy;
    let replacer: Object;
    typeswitch (replaceValue) {
      case (replaceFn: Callable): {
        replacer = replaceFn;
        strategy = NewReplaceStrategyForCallable(regexp);
        // return regexp.global ?
        //     RegExpReplaceFastGlobalCallable(regexp, string, replaceFn) :
        //     StringReplaceNonGlobalRegExpWithFunction(string, regexp,
        //     replaceFn);
      }
      case (Object): {
        const replaceString: String = replacer = ToString_Inline(context, replaceValue);
        // ToString(replaceValue) could potentially change the shape of the
        // RegExp object. Recheck that we are still on the fast path and bail
        // to runtime otherwise.
        if (StringIndexOf(
                replaceString, SingleCharacterStringConstant('$'), 0) != -1)
          deferred {
            return RegExpReplaceRT(
                context, regexp, string, replaceString);
          }
        strategy = NewReplaceStrategy(regexp);
      }
    }

    try {
      const fastRegexp = Cast<FastJSRegExp>(regexp) otherwise IfSlow;
      return Process(fastRegexp, string, replacer, strategy);
    }
    label IfSlow deferred {
      return Process(regexp, string, replacer, strategy);
    }
  }

  transitioning javascript builtin RegExpPrototypeReplace(
      context: Context, receiver: Object, ...arguments): Object {
    const methodName: constexpr string = 'RegExp.prototype.@@replace';

    // RegExpPrototypeReplace is a bit of a beast - a summary of dispatch logic:
    //
    // if (!IsFastRegExp(receiver)) CallRuntime(RegExpReplace)
    // if (IsCallable(replace)) {
    //   if (IsGlobal(receiver)) {
    //     // Called 'fast-path' but contains several runtime calls.
    //     RegExpReplaceFastGlobalCallable()
    //   } else {
    //     CallRuntime(StringReplaceNonGlobalRegExpWithFunction)
    //   }
    // } else {
    //   if (replace.contains("$")) {
    //     CallRuntime(RegExpReplace)
    //   } else {
    //     RegExpReplaceFastString()
    //   }
    // }

    const string: Object = arguments[0];
    const replaceValue: Object = arguments[1];

    // Let rx be the this value.
    // If Type(rx) is not Object, throw a TypeError exception.
    const rx = Cast<JSReceiver>(receiver)
        otherwise ThrowTypeError(kIncompatibleMethodReceiver, methodName);

    // Let S be ? ToString(string).
    const s = ToString_Inline(context, string);

    // Fast-path checks: 1. Is the {receiver} an unmodified JSRegExp instance?
    try {
      const regexp: FastJSRegExp = Cast<FastJSRegExp>(rx) otherwise Runtime;
      return RegExpReplace(regexp, s, replaceValue);
    }
    label Runtime deferred {
      return RegExpReplaceRT(context, rx, s, replaceValue);
    }
  }

}
