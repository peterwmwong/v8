// Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

namespace string {

extern macro AllocateSlicedOneByteString(uint32, String, Smi): String;
extern macro AllocateSlicedTwoByteString(uint32, String, Smi): String;

extern macro StringBuiltinsAssembler::LoadChar8(RawPtr, uintptr): char8;
extern macro StringBuiltinsAssembler::StoreChar8(RawPtr, uintptr, char8): void;

const kSlicedStringMinLength:
    constexpr int31 generates 'SlicedString::kMinLength';

// extern macro SingleCharacterStringCacheConstant(): FixedArray;
// extern macro UnsafeLoadFixedArrayElement(FixedArray, intptr): Object;
// const kSingleCharacterStringCache: FixedArray =
//     SingleCharacterStringCacheConstant();
// const kMaxOneByteCharCode:
//     constexpr int32 generates 'String::kMaxOneByteCharCode';
// macro StringFromSingleCharCode2(char: char8|char16): String {
//   const charInt = Convert<intptr>(Convert<int32>(char));
//   if (Convert<int32>(char) <= kMaxOneByteCharCode) {
//     const maybeString =
//         UnsafeLoadFixedArrayElement(kSingleCharacterStringCache, charInt);
//     if (maybeString != Undefined) {
//       return UnsafeCast<String>(maybeString);
//     } else
//       deferred {
//         const result = AllocateNonEmptySeqOneByteString(
//             1, ConstantIterator(%RawDownCast<char8>(char)));
//         kSingleCharacterStringCache.objects[charInt] = result;
//         return result;
//       }
//   } else
//     deferred {
//       return AllocateNonEmptySeqTwoByteString(
//           1, ConstantIterator(%RawDownCast<char16>(char)));
//     }
// }

macro AllocateSeqString<T: type>(length: uint32): never labels Result(
    String, ConstSlice<T>);
AllocateSeqString<char8>(length: uint32): never labels Result(
    String, ConstSlice<char8>) {
  const str = AllocateNonEmptySeqOneByteString(length);
  goto Result(str, &str.chars);
}
AllocateSeqString<char16>(length: uint32): never labels Result(
    String, ConstSlice<char16>) {
  const str = AllocateNonEmptySeqTwoByteString(length);
  goto Result(str, &str.chars);
}

macro AllocateSlicedString<T: type>(
    length: uint32, parent: String, offset: intptr): String;
AllocateSlicedString<char8>(
    length: uint32, parent: String, offset: intptr): String {
  return AllocateSlicedOneByteString(length, parent, SmiTag(offset));
}
AllocateSlicedString<char16>(
    length: uint32, parent: String, offset: intptr): String {
  return AllocateSlicedTwoByteString(length, parent, SmiTag(offset));
}

macro WriteToString<T: type>(
    src: ConstSlice<T>, srcFrom: intptr, length: uint32): String {
  assert(length > 0 && (src.length - srcFrom) >= Convert<intptr>(length));
  try {
    AllocateSeqString<T>(length) otherwise AllocatedString;
  } label AllocatedString(dest: String, destChars: ConstSlice<T>) {
    const srcPtr =
        src.GCUnsafeStartPointer() + torque_internal::TimesSizeOf<T>(srcFrom);
    const destPtr = destChars.GCUnsafeStartPointer();
    const byteLength =
        Unsigned(torque_internal::TimesSizeOf<T>(Convert<intptr>(length)));
    let i: uintptr = 0;
    while (true) {
      StoreChar8(destPtr, i, LoadChar8(srcPtr, i));
      if (++i == byteLength) break;
    }
    return dest;
  }
}

macro SubStringImpl<T: type>(
    srcParent: String, srcParentOffset: intptr, src: ConstSlice<T>,
    from: uintptr, length: uint32): String {
  const fromInt = Convert<intptr>(from);
  if (length == 1) {
    return StringFromSingleCharCode(*src.AtIndex(fromInt));
  }
  if (length < kSlicedStringMinLength) {
    return WriteToString(src, fromInt, length);
  }
  return AllocateSlicedString<T>(length, srcParent, srcParentOffset + fromInt);
}

macro SubString(string: String, from: uintptr, to: uintptr): String {
  const length = Convert<uint32>(to - from);
  assert(length <= string.length_uint32);
  if (length == string.length_uint32) return string;
  if (length == 0) return kEmptyString;

  try {
    StringToStringSlice2(string) otherwise OneByte, TwoByte, OneByteExternal,
        TwoByteExternal;
  } label OneByte(parent: String, offset: intptr, chars: ConstSlice<char8>) {
    return SubStringImpl(parent, offset, chars, from, length);
  } label TwoByte(parent: String, offset: intptr, chars: ConstSlice<char16>) {
    return SubStringImpl(parent, offset, chars, from, length);
  } label OneByteExternal(
      parent: String, offset: intptr, chars: ConstSlice<char8>) deferred {
    return SubStringImpl(parent, offset, chars, from, length);
  } label TwoByteExternal(
      parent: String, offset: intptr, chars: ConstSlice<char16>) deferred {
    return SubStringImpl(parent, offset, chars, from, length);
  }
}

builtin SubString(implicit context: Context)(
    s: String, from: Smi, to: Smi): String {
  return SubString(
      s, Unsigned(Convert<intptr>(from)), Unsigned(Convert<intptr>(to)));
}

builtin StringSubstring(implicit context: Context)(
    s: String, from: intptr, to: intptr): String {
  return SubString(s, Unsigned(from), Unsigned(to));
}

// ES6 #sec-string.prototype.substring
transitioning javascript builtin StringPrototypeSubstring(
    js-implicit context: NativeContext, receiver: JSAny)(...arguments): String {
  // Check that {receiver} is coercible to Object and convert it to a String.
  const string: String = ToThisString(receiver, 'String.prototype.substring');
  const length: uintptr = string.length_uintptr;

  // Conversion and bounds-checks for {start}.
  const arg0 = arguments[0];
  let start: uintptr = arg0 != Undefined ? ClampToIndexRange(arg0, length) : 0;

  // Conversion and bounds-checks for {end}.
  const arg1 = arguments[1];
  let end: uintptr =
      arg1 != Undefined ? ClampToIndexRange(arg1, length) : length;
  if (end < start) {
    const tmp: uintptr = end;
    end = start;
    start = tmp;
  }
  return SubString(string, start, end);
}
}
