// Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// TODO(pwong): ...
// - Add an specialization of InitializeFieldsFromIterator using RawPtr
// (basically WriteToString)

namespace string {

const kSlicedStringMinLength:
    constexpr int31 generates 'SlicedString::kMinLength';

extern macro SingleCharacterStringCacheConstant(): FixedArray;
const kSingleCharacterStringCache: FixedArray =
    SingleCharacterStringCacheConstant();
const kMaxOneByteCharCode:
    constexpr int31 generates 'String::kMaxOneByteCharCode';

struct AllocatedSeqString {
  string: SeqString;
  chars: RawPtr;
  byteLength: intptr;
}

macro AllocateNonEmptySeqString(
    isOneByte: bool, length: uint32): AllocatedSeqString {
  if (isOneByte) {
    const string = AllocateNonEmptySeqOneByteString(length);
    return AllocatedSeqString{
      string: string,
      chars: string.GetChars(),
      byteLength: torque_internal::TimesSizeOf<char8>(Convert<intptr>(length))
    };
  } else {
    const string = AllocateNonEmptySeqTwoByteString(length);
    return AllocatedSeqString{
      string: string,
      chars: string.GetChars(),
      byteLength: torque_internal::TimesSizeOf<char16>(Convert<intptr>(length))
    };
  }
}

macro SubStringSmallImpl(
    isOneByte: bool, srcChars: RawPtr, length: uint32): String {
  const allocString = AllocateNonEmptySeqString(isOneByte, length);
  let i: intptr = 0;
  while (true) {
    StoreChar8(allocString.chars, i, LoadChar8(srcChars, i));
    if (++i == allocString.byteLength) break;
  }
  return allocString.string;
}

macro SubString(string: String, from: uintptr, to: uintptr): String {
  const length = Convert<uint32>(to - from);
  assert(length <= string.length_uint32);
  if (length == string.length_uint32) return string;
  if (length == 0) return kEmptyString;

  const fromInt = Convert<intptr>(from);
  try {
    StringToRootStringAndOffset(string) otherwise OneByte, TwoByte,
        OneByteExternal, TwoByteExternal;
  } label OneByte(r: SeqOneByteString, o: intptr) {
    const chars =
        r.GetChars() + torque_internal::TimesSizeOf<char8>(o + fromInt);
    goto DoSubString(r, o, chars, true);
  } label TwoByte(r: SeqTwoByteString, o: intptr) {
    const chars =
        r.GetChars() + torque_internal::TimesSizeOf<char16>(o + fromInt);
    goto DoSubString(r, o, chars, false);
  } label OneByteExternal(r: ExternalOneByteString, o: intptr) {
    const chars =
        r.GetChars() + torque_internal::TimesSizeOf<char8>(o + fromInt);
    goto DoSubString(r, o, chars, true);
  } label TwoByteExternal(r: ExternalTwoByteString, o: intptr) {
    const chars =
        r.GetChars() + torque_internal::TimesSizeOf<char16>(o + fromInt);
    goto DoSubString(r, o, chars, false);
  } label DoSubString(
      src: String, srcOffset: intptr, srcChars: RawPtr, isOneByte: bool) {
    let isOneByte = isOneByte;
    let singleCharCode: intptr = kMaxOneByteCharCode + 1;
    if (length == 1) {
      singleCharCode = Convert<intptr>(Convert<int32>(
          isOneByte ? LoadChar8(srcChars, 0) : LoadChar16(srcChars, 0)));
      if (singleCharCode <= kMaxOneByteCharCode) {
        isOneByte = true;
        const cached = kSingleCharacterStringCache.objects[singleCharCode];
        if (cached != Undefined) return %RawDownCast<String>(cached);
      }
    }

    if (length < kSlicedStringMinLength) {
      const result = SubStringSmallImpl(isOneByte, srcChars, length);
      if (singleCharCode <= kMaxOneByteCharCode)
        kSingleCharacterStringCache.objects[singleCharCode] = result;
      return result;
    }

    return AllocateSlicedString(
        isOneByte, length, src, Convert<Smi>(srcOffset + fromInt));
  }
}

builtin SubString(implicit context: Context)(
    s: String, from: Smi, to: Smi): String {
  return SubString(
      s, Unsigned(Convert<intptr>(from)), Unsigned(Convert<intptr>(to)));
}

builtin StringSubstring(implicit context: Context)(
    s: String, from: intptr, to: intptr): String {
  return SubString(s, Unsigned(from), Unsigned(to));
}

// ES6 #sec-string.prototype.substring
transitioning javascript builtin StringPrototypeSubstring(
    js-implicit context: NativeContext, receiver: JSAny)(...arguments): String {
  // Check that {receiver} is coercible to Object and convert it to a String.
  const string: String = ToThisString(receiver, 'String.prototype.substring');
  const length: uintptr = string.length_uintptr;

  // Conversion and bounds-checks for {start}.
  const arg0 = arguments[0];
  let start: uintptr = arg0 != Undefined ? ClampToIndexRange(arg0, length) : 0;

  // Conversion and bounds-checks for {end}.
  const arg1 = arguments[1];
  let end: uintptr =
      arg1 != Undefined ? ClampToIndexRange(arg1, length) : length;
  if (end < start) {
    const tmp: uintptr = end;
    end = start;
    start = tmp;
  }
  return SubString(string, start, end);
}
}
